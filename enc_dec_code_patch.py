
import socket
import rsa


#function to generate rsa public, pvt pair
# store the pvt key in client side only, and add the public key to the keys folder, send path of public key
def gen_rsa_key(id):
    (public_key, private_key) = rsa.newkeys(1024)
    with open(f'keys/{id}public.pem', 'wb') as p:
        p.write(public_key.save_pkcs1('PEM'))

    return (f'keys/{id}public.pem', private_key)


def get_count(dict_status):
    import json

    json_acceptable_string = dict_status.replace("'", "\"")
    d = json.loads(json_acceptable_string)
    no_of_idle=0
    for key, val in d.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
        if val =='idle':
            no_of_idle=no_of_idle+1

    print(no_of_idle)
    return(no_of_idle)


import Cryptodome
from Cryptodome.Cipher import AES
from hash import *

def encrypt(plaintext, key, hashed_data):
    B = str(plaintext) + str(hashed_data)
    cipher = AES.new(key, AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext, tag = cipher.encrypt_and_digest(B.encode())
    return ciphertext, nonce, tag

from Cryptodome.Cipher import AES

def decrypt(ciphertext, key, nonce):
    cipher = AES.new(key, AES.MODE_EAX, nonce)
    plaintext = cipher.decrypt(ciphertext)
    return plaintext

## server address is stored here
serverAddressPort = ("127.0.0.1", 20001)
bufferSize = 1024

# Create a UDP socket at client side
UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)


# Client is on, enter username after #
username = input("Enter your user name:")
# generate rsa_key with and share the public key path with server
public_key, private_key = gen_rsa_key(username)

#show username and pvt key
#print(username + " -> ")
#print(private_key)
path_for_public_key = username + "," + public_key
UDPClientSocket.sendto(path_for_public_key.encode(), serverAddressPort)




# msg received has list of clients with state, idle or busy
msgFromServer = UDPClientSocket.recvfrom(bufferSize)
msg1 = "Message from Server {}".format(msgFromServer[0].decode())
print(msg1)


# split received input and extract the dictionary
text,dict_from_server=msgFromServer[0].decode().split('!')
print(dict_from_server)

# get number of idle counts from get_count function
no_of_idle_count= get_count(dict_from_server)



## encryption decryption part post while

if(no_of_idle_count==1):
    while True:
        #  msg received from client
        key = b"z$B&E)H@McQfTjWnZr4u7x!A%D*F-JaN"  #change to server generated key
        msgFromServer = UDPClientSocket.recvfrom(bufferSize)
        msg1 = "Message from {} - {}".format(msgFromServer[1],msgFromServer[0].decode())

        msg=msgFromServer[0].decode()
        #print("decoded msg",msg)

        msg_part, nonce, tag=msg.split("delim")
        print(msg_part)
        print('\n')
        print(nonce, type(nonce))
        print('\n')
        msg_decrypted = decrypt(msg_part.encode(), key, nonce.encode())

        print(msg_decrypted)
        #print("\n",msg1)

        # send reply msg to other user
        print("\n")
        send_msg = input("msg to reply to {} -".format(msgFromServer[1]))

        key = b'z$B&E)H@McQfTjWnZr4u7x!A%D*F-JaN'
        iv = os.urandom(16) # change to server generated IV
        hashed = hash(key, iv) #key and iv generated by server
        msg_sent, nonce, tags = encrypt(send_msg.encode(), key, hashed)
        print("here=",msg_sent,nonce,tags,"\n")
        print('\n')
        msg_sending = (str(msg_sent) +'delim'+ str(nonce)+'delim'+str(tags)).encode()
        #encrypted_msg=encrypt(msg_sent)

        print(msg_sending)
        print('\n')
       
        UDPClientSocket.sendto(msg_sending, msgFromServer[1])

        #wait for exit key word, if yes then break the communication
        if (send_msg == 'exit'):
            break



# dont go to listen mode, send the username we want to talk to from the list
else:

    #  #send msg to server, username
    send_msg = input("enter user you want to talk to ")
    UDPClientSocket.sendto(send_msg.encode(), serverAddressPort)


    # msg received status and client ip and port
    msgFromServer_status = UDPClientSocket.recvfrom(bufferSize)
    msg2 = "Message from Server {}".format(msgFromServer_status[0].decode())
    msg_addr_server = msgFromServer_status[1]
    print("status=",msg2)


    msgFromServer_ip = UDPClientSocket.recvfrom(bufferSize)
    msg2 = "Message from Server {}".format(msgFromServer_ip[0].decode())
    msg_addr_server = msgFromServer_ip[1]
    print(msg2)

    addr_client = msgFromServer_ip[0]
    #print(addr_client)
    print(addr_client.decode())

    # talk to the client on the port and ip received
    while True:

        #all are on localhost, so ip is same as below
        udp_ip = "127.0.0.1"
        addr_client_decoded = addr_client.decode()
        #extract port number from address ('127.0.0.1',port)
        udp_port = addr_client_decoded[addr_client_decoded.index(',')+1:-1]
        #print(udp_port)
        udp_port_int = int(udp_port)

    #  send first msg to other user
        print("\n")
        send_msg = input("msg to send to requested user {} port {} - ".format(udp_ip, udp_port_int))


        key = b'z$B&E)H@McQfTjWnZr4u7x!A%D*F-JaN'
        iv = os.urandom(16) # change to server generated IV
        hashed = hash(key, iv) #key and iv generated by server
        msg_sent, nonce, tags = encrypt(send_msg.encode(), key, hashed)
        print("here=",msg_sent,nonce,tags,"\n")
        print('\n')
        print(type(msg_sent))
        print(type(nonce))
        print(type(tags))
        
        a=b'delim'
        c=b'delim'
        msg_sending = b"".join([msg_sent,a,nonce,c,tags])
        #(msg_sent +'delim'+ nonce+'delim'+tags).encode()
        #encrypted_msg=encrypt(msg_sent)

        print(msg_sending)
        print('\n')
       
        UDPClientSocket.sendto(msg_sending, (udp_ip, udp_port_int))

    # 2. reply received from other client

     #  msg received from client
        key = b"z$B&E)H@McQfTjWnZr4u7x!A%D*F-JaN"  #change to server generated key
        msgFromServer = UDPClientSocket.recvfrom(bufferSize)
        msg1 = "Message from {} - {}".format(msgFromServer[1],msgFromServer[0].decode())

        msg=msgFromServer[0].decode()
        print("decoded msg",msg)
        print('\n')

        msg_part, nonce, tag=msg.split("delim")
        print(msg_part)
        print(nonce, type(nonce))
        print('\n')
        msg_decrypted = decrypt(msg_part.encode(), key, nonce.encode())

        print(msg_decrypted)
        #print("\n",msg1)

        
        #send_msg = input("if you want to end type exit ")
        if (send_msg == 'exit'):
            break

    UDPClientSocket.close()
